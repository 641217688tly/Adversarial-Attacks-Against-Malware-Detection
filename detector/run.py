import argparse
from detector.train_test.train import train_model
from detector.train_test.test import test_model

# 定义解析命令行参数的函数
def argument_parse():
    """
    解析命令行参数并返回。
    :return: 用户定义的参数。
    """
    # 创建解析器对象
    parser = argparse.ArgumentParser(description="Malware Classification.")
    # 添加"mode"参数，用户需要指定是训练模式还是测试模式
    parser.add_argument("mode", help="specify \"train\" or \"test\"")
    # 添加"--epoch"参数，用于指定训练模型的迭代次数，默认为20
    parser.add_argument("--epoch", type=int, help="number of iterations to train model (default: 20)", metavar="",
                        default=20)
    # 添加"--model"参数，用户需要提供模型保存或加载的路径
    parser.add_argument("--model", help="the path of model, which is used to save or load model", metavar="",
                        required=True)
    # 解析命令行参数
    args = parser.parse_args()

    return args

# 定义主运行函数
def run_bytes():
    # 获取命令行参数
    args = argument_parse()

    # 检查命令行参数是否正确
    if args.mode not in ["train", "test"]:
        print("Please specify the correct mode (\"train\" or \"test\").)\n"
              "Use \"python main.py -h\" to get help.")
        return

    # 根据用户指定的模式，运行训练或测试
    if args.mode == 'train':
        # 训练模型
        train_model(args.model, args.epoch)
    elif args.mode == 'test':
        # 测试模型
        test_model(args.model)

# 判断是否在直接运行此脚本
if __name__ == "__main__":
    run_bytes()  # 运行主函数
