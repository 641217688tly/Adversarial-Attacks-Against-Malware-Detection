'''
这个模块定义了ResNet网络,包括ResNet的基本残差块和完整的ResNet网络
为了验证基于GAN的攻击策略对于不同的黑盒模型是否有效,它将在后续被集成进GAN的黑盒检测器中
'''

import torch.nn as nn

# BasicBlock类定义了ResNet网络中的基本残差块
class BasicBlock(nn.Module):
    def __init__(self, in_channels, out_channels, stride):
        super().__init__()

        # 定义残差函数，由一系列层组成，包括BatchNorm、ReLU、Conv2d等
        self.residual_function = nn.Sequential(
            nn.BatchNorm2d(in_channels),  # 2D批归一化层，用于归一化输入数据，提高网络训练稳定性
            nn.ReLU(inplace=True),  # ReLU激活函数，inplace=True表示直接修改输入数据，节省内存
            nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False),  # 2D卷积层
            nn.BatchNorm2d(out_channels),  # 2D批归一化层
            nn.ReLU(inplace=True),  # ReLU激活函数
            nn.Conv2d(out_channels, out_channels, kernel_size=3, padding=1, bias=False)  # 2D卷积层
        )

        # 定义shortcut连接，如果输入和输出维度不一样，使用1x1卷积调整维度
        self.shortcut = nn.Sequential()
        if stride != 1 or in_channels != out_channels:
            self.shortcut = nn.Sequential(
                nn.Conv2d(in_channels, out_channels, kernel_size=1, stride=stride, bias=False),  # 1x1卷积层，调整维度
                nn.BatchNorm2d(out_channels)  # 2D批归一化层
            )

    # 前向传播函数，计算残差块的输出
    def forward(self, x):
        return nn.ReLU(inplace=True)(
            self.residual_function(x) + self.shortcut(x))  # 将残差函数的输出和shortcut连接的输出相加，并通过ReLU激活函数


# ResNet类定义了完整的ResNet网络
class ResNet(nn.Module):
    def __init__(self, num_block, num_classes=9):
        super().__init__()

        # 定义输入通道数
        self.in_channels = 64

        # 定义网络的第一个卷积层，包括一个卷积层、批归一化层、ReLU激活函数和最大池化层
        self.conv_input = nn.Sequential(
            nn.Conv2d(3, 64, kernel_size=7, stride=2, padding=3, bias=False),  # 2D卷积层，用于提取图像的特征
            nn.BatchNorm2d(64),  # 2D批归一化层
            nn.ReLU(inplace=True),  # ReLU激活函数
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1)  # 2D最大池化层，用于降低特征维度，减少计算量
        )

        # 定义四个卷积块，每个卷积块包含多个残差块
        self.conv_block1 = self.generate_layer(64, num_block[0], 1)
        self.conv_block2 = self.generate_layer(128, num_block[1], 2)
        self.conv_block3 = self.generate_layer(256, num_block[2], 2)
        self.conv_block4 = self.generate_layer(512, num_block[3], 2)

        # 定义平均池化层
        self.avg_pool = nn.AvgPool2d(kernel_size=7, stride=1)

        # 定义全连接层，用于分类
        self.fc = nn.Linear(512, num_classes)

        # Kaiming He初始化，对卷积层和批归一化层的参数进行初始化
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

    # 生成卷积块的函数
    def generate_layer(self, out_channels, num_block, stride):
        """
        生成ResNet层。
        :param out_channels: 该层的输出通道数
        :param num_block: 每层中的残差块数量
        :param stride: 第一个残差块的步长
        :return: ResNet层
        """
        strides = [stride] + [1] * (num_block - 1)  # 第一个残差块的步长可能是1或2，其他的都是1
        layers = []  # 用于存储残差块的列表
        for stride in strides:
            layers.append(BasicBlock(self.in_channels, out_channels, stride))  # 创建残差块并添加到列表
            self.in_channels = out_channels  # 更新输入通道数

        return nn.Sequential(*layers)  # 将残差块列表转换为序列，创建一个nn.Sequential模块

    # 前向传播函数，计算网络的输出
    def forward(self, x):
        output = self.conv_input(x)  # 通过第一个卷积层
        output = self.conv_block1(output)  # 通过第一个卷积块
        output = self.conv_block2(output)  # 通过第二个卷积块
        output = self.conv_block3(output)  # 通过第三个卷积块
        output = self.conv_block4(output)  # 通过第四个卷积块
        output = self.avg_pool(output)  # 通过平均池化层
        output = output.view(output.size(0), -1)  # 展平输出以便输入到全连接层
        output = self.fc(output)  # 通过全连接层

        return output  # 返回网络的输出


# 构建ResNet-18网络的函数
def resnet_18():
    return ResNet([2, 2, 2, 2])


# 构建ResNet-34网络的函数
def resnet_34():
    return ResNet([3, 4, 6, 3])
