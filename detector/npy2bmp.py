import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision.transforms import Compose, Resize, ToTensor, Normalize, Grayscale
from PIL import Image


class BinaryVectorToImageDataset(Dataset):
    def __init__(self, data, labels, transform=None):
        self.data = data
        self.labels = labels
        self.transform = transform

    def __len__(self):
        return len(self.labels)

    def __getitem__(self, idx):
        # 将128维向量转换为16x8的矩阵
        image = np.reshape(self.data[idx], (16, 8)).astype(np.uint8) * 255
        image = Image.fromarray(image)  # 创建一个PIL图像

        if self.transform:
            image = self.transform(image)

        label = self.labels[idx]
        return image, label


# 读取.npy文件
data = np.load('path_to_your_npy_file.npy')
labels = ...  # 您需要提供标签数组

# 转换链
transform = Compose([
    Resize((224, 224)),  # 将图像调整为224x224
    Grayscale(num_output_channels=3),  # 复制灰度通道到3个通道
    ToTensor(),  # 转换为torch.Tensor
    Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),  # 标准化
])

# 创建数据集
dataset = BinaryVectorToImageDataset(data, labels, transform=transform)

# 创建数据加载器
dataloader = DataLoader(dataset, batch_size=64, shuffle=True)
