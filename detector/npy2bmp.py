import numpy as np
from PIL import Image
import os


def process_and_save_images(dataset_path, target_folder):
    # Create the target folder for train and test if they don't exist
    train_folder = os.path.join(target_folder, 'train')
    test_folder = os.path.join(target_folder, 'test')

    if not os.path.exists(train_folder):
        os.makedirs(train_folder)
    if not os.path.exists(test_folder):
        os.makedirs(test_folder)

    # Load the dataset
    data = np.load(dataset_path)

    # Calculate the split index for 3/4 training and 1/4 testing
    split_index = int(len(data) * 0.75)

    # Process and save training images
    for idx, sample in enumerate(data[:split_index]):
        image = process_sample_to_image(sample)
        image_path = os.path.join(train_folder, f"sample_{idx}.bmp")
        image.save(image_path)

    # Process and save testing images
    for idx, sample in enumerate(data[split_index:], start=split_index):
        image = process_sample_to_image(sample)
        image_path = os.path.join(test_folder, f"sample_{idx}.bmp")
        image.save(image_path)


def process_sample_to_image(sample):
    # Append 16 zero features to make the vector of length 144
    padded_sample = np.pad(sample, (0, 16), mode='constant', constant_values=0)

    # Reshape the vector into a 12x12 matrix
    matrix = np.reshape(padded_sample, (12, 12))

    # Convert the matrix to a PIL Image and scale to 0-255 for grayscale
    image = Image.fromarray(np.uint8(matrix * 255), 'L')

    return image


# Define the paths to the datasets
benign_dataset_path = "D:/1University/stage 3/4Software Methodology/Research/Adversarial Example Generator/data/trial_ben.npy"
malware_dataset_path = "D:/1University/stage 3/4Software Methodology/Research/Adversarial Example Generator/data/trial_mal.npy"

# Define the target folders for the images
benign_target_folder = "D:/1University/stage 3/4Software Methodology/Research/Adversarial Example Generator/data/trial_ben.bmp"
malware_target_folder = "D:/1University/stage 3/4Software Methodology/Research/Adversarial Example Generator/data/trial_mal.bmp"

# Process the benign and malware datasets
process_and_save_images(benign_dataset_path, benign_target_folder)
process_and_save_images(malware_dataset_path, malware_target_folder)
