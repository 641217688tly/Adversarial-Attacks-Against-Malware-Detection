import numpy as np
from PIL import Image
import os
from detector import load_config


def process_and_save_images(dataset_path, target_folder):
    # Create the target folder for train and test if they don't exist
    train_folder = os.path.join(target_folder, 'train')
    test_folder = os.path.join(target_folder, 'test')
    if not os.path.exists(train_folder):
        os.makedirs(train_folder)
    if not os.path.exists(test_folder):
        os.makedirs(test_folder)
    # Load the dataset
    data = np.load(dataset_path)
    # Calculate the split index for 4/5 training and 1/5 testing
    split_index = int(len(data) * 0.8)
    # Process and save training images
    for idx, sample in enumerate(data[:split_index]):
        image = process_sample_to_image(sample)
        image_path = os.path.join(train_folder, f"sample_{idx}.bmp")
        image.save(image_path)

    # Process and save testing images
    for idx, sample in enumerate(data[split_index:], start=split_index):
        image = process_sample_to_image(sample)
        image_path = os.path.join(test_folder, f"sample_{idx}.bmp")
        image.save(image_path)


def process_sample_to_image(sample):
    # Reshape the vector into a 16x8 matrix
    matrix = np.reshape(sample, (16, 8))
    # Convert the matrix to a PIL Image and scale to 0-255 for grayscale
    image = Image.fromarray(np.uint8(matrix * 255), 'L')
    return image


# 加载配置信息
config = load_config('../config.yml')

# Define the paths to the datasets
BENIGN_DATASET_PATH = config['DETECTOR']['DATASET']['BENIGN_DATASET_PATH']
MALWARE_DATASET_PATH = config['DETECTOR']['DATASET']['MALWARE_DATASET_PATH']

# Define the target folders for the images
BENIGN_BMP_DATASET_PATH = config['DETECTOR']['DATASET']['BENIGN_BMP_DATASET_PATH']
MALWARE_BMP_DATASET_PATH = config['DETECTOR']['DATASET']['MALWARE_BMP_DATASET_PATH']

# Process the benign and malware datasets
process_and_save_images(BENIGN_DATASET_PATH, BENIGN_BMP_DATASET_PATH)
process_and_save_images(MALWARE_DATASET_PATH, MALWARE_BMP_DATASET_PATH)
