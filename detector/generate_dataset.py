import os
import random
import numpy as np
import torch
from PIL import Image
from torch.utils.data import Dataset


class MalwareData(Dataset):
    def __init__(self, images, labels):
        self.images = images
        self.labels = labels

    def __getitem__(self, index):
        # Load image as a gray scale image
        image_path = self.images[index]
        image = Image.open(image_path).convert('L')  # Convert to grayscale
        image = np.array(image, dtype=np.float32)  # Convert image to numpy array

        # No resizing needed, as our images are already 12x12
        image_tensor = torch.from_numpy(image).unsqueeze(0)  # Add channel dimension

        # Normalize the image to [0, 1] range
        image_tensor = image_tensor / 255.0

        label = self.labels[index]
        return image_tensor, label

    def __len__(self):
        return len(self.labels)


def get_dataset(benign_path, malignant_path):
    x = []
    y = []

    # Load benign images
    benign_files = [os.path.join(benign_path, f) for f in os.listdir(benign_path)]
    x.extend(benign_files)
    y.extend([0] * len(benign_files))  # Label for benign is 0

    # Load malignant images
    malignant_files = [os.path.join(malignant_path, f) for f in os.listdir(malignant_path)]
    x.extend(malignant_files)
    y.extend([1] * len(malignant_files))  # Label for malignant is 1

    # Shuffle the dataset
    dataset = list(zip(x, y))
    random.shuffle(dataset)
    x[:], y[:] = zip(*dataset)

    return MalwareData(x, y)

# Now you can use get_dataset function to load your data
# train_dataset = get_dataset('path_to_your_train_data')
# test_dataset = get_dataset('path_to_your_test_data')
