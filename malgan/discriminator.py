# -*- coding: utf-8 -*-
# 导入类型注解工具，可用于在函数签名中注明参数或返回值的类型
from typing import List

# 导入PyTorch库，它是一个深度学习框架
import torch
from torch import Tensor

# 导入torch.nn模块，包含了深度学习中的基本构建块（如层、损失函数等）
import torch.nn as nn


# noinspection PyPep8Naming
class Discriminator(nn.Module):
    r""" MalGAN discriminator (substitute detector).  Simple feed forward network. """

    # 定义一个非常小的常量，以防止数值计算问题（如除以0的情况）
    EPS = 1e-7

    def __init__(self, M: int, hidden_size: List[int], g: nn.Module):
        r"""Discriminator Constructor

        Builds the discriminator block.

        :param M: Width of the malware feature vector
        :param hidden_size: Width of the hidden layer(s).
        :param g: Activation function
        """
        # 使用super()调用nn.Module的初始化方法，确保网络初始化正确
        super().__init__()

        # 创建一个前馈神经网络层的序列
        self._layers = nn.Sequential()
        # 构建隐藏层
        for i, (in_w, out_w) in enumerate(zip([M] + hidden_size[:-1], hidden_size)):
            # 每一层由线性变换和激活函数组成
            layer = nn.Sequential(nn.Linear(in_w, out_w), g)
            self._layers.add_module("FF%02d" % i, layer)

        # 创建输出层，其输出通过sigmoid函数映射到[0,1]范围内
        layer = nn.Sequential(nn.Linear(hidden_size[-1], 1), nn.Sigmoid())
        self._layers.add_module("FF%02d" % len(hidden_size), layer)

    def forward(self, X: Tensor) -> Tensor:
        r"""
        Forward path through the discriminator.

        :param X: Input example tensor
        :return: :math:`D_{sigma}(x)` -- Value predicted by the discriminator.
        """
        # 输入X通过前馈网络
        d_theta = self._layers(X)
        # 为了数值稳定性，使用clamp函数将输出限制在[EPS, 1-EPS]范围内
        return torch.clamp(d_theta, self.EPS, 1. - self.EPS).view(-1)

# 讲解：
# GAN(生成对抗网络)：它包含一个生成器和一个判别器，生成器试图生成假数据，而判别器试图区分真实数据和假数据。
# 这里的Discriminator就是GAN中的判别器部分，用于区分输入的数据是真实的还是由生成器生成的假数据。
# MalGAN：是一种特定于恶意软件生成对抗性样本的GAN模型。
# 前馈网络(Feed Forward Network)：是一种基本的神经网络，数据只在一个方向上流动，从输入层到输出层。
