from typing import List # 导入类型注解工具，可用于在函数签名中注明参数或返回值的类型

import numpy as np
import torch
from torch import Tensor
import torch.nn as nn # 导入torch.nn模块，包含了深度学习中的基本构建块（如层、损失函数等）


# noinspection PyPep8Naming
class Discriminator(nn.Module):
    r""" MalGAN discriminator (substitute detector).  Simple feed forward network. """

    EPS = 1e-7 # 定义一个非常小的常量，以防止数值计算问题（如除以0的情况）

    def __init__(self, M: int, hidden_size: List[int], g: nn.Module):
        r"""Discriminator Constructor
        Builds the discriminator block.
        :param M: Width of the malware feature vector
        :param hidden_size: Width of the hidden layer(s).
        :param g: Activation function
        """
        super().__init__()
        self._layers = nn.Sequential() # 创建一个前馈神经网络层的序列
        for i, (in_w, out_w) in enumerate(zip([M] + hidden_size[:-1], hidden_size)):# 构建隐藏层
            # 每一层由线性变换和激活函数组成
            layer = nn.Sequential(nn.Linear(in_w, out_w), g)
            self._layers.add_module("FF%02d" % i, layer)

        # 创建输出层，其输出通过sigmoid函数映射到[0,1]范围内
        layer = nn.Sequential(nn.Linear(hidden_size[-1], 1), nn.Sigmoid())
        self._layers.add_module("FF%02d" % len(hidden_size), layer)

    def forward(self, X: Tensor) -> Tensor:
        r"""
        Forward path through the discriminator.
        :param X: Input example tensor
        :return: :math:`D_{sigma}(x)` -- Value predicted by the discriminator.
        """
        # 输入X通过前馈网络
        d_theta = self._layers(X)
        # 为了数值稳定性，使用clamp函数将输出限制在[EPS, 1-EPS]范围内
        return torch.clamp(d_theta, self.EPS, 1. - self.EPS).view(-1)
