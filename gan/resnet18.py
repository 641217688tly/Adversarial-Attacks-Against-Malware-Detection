import torch
import torch.nn as nn
import numpy as np
from PIL import Image

# BasicBlock类定义了ResNet网络中的基本残差块
class BasicBlock(nn.Module):
    expansion = 1
    def __init__(self, in_channels, out_channels, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = nn.Conv2d(in_channels, out_channels, kernel_size=3, stride=stride, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(out_channels)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = nn.Conv2d(out_channels, out_channels, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn2 = nn.BatchNorm2d(out_channels)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        residual = x
        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.conv2(out)
        out = self.bn2(out)
        if self.downsample is not None:
            residual = self.downsample(x)
        out += residual
        out = self.relu(out)
        return out


# ResNet类定义了完整的ResNet网络
class ResNet(nn.Module):
    def __init__(self, block, layers, num_classes=2):
        super(ResNet, self).__init__()
        self.in_channels = 64
        # Adjusted the initial convolutional layer for 16x8 input
        self.conv1 = nn.Conv2d(1, 64, kernel_size=3, stride=1, padding=1, bias=False)
        self.bn1 = nn.BatchNorm2d(64)
        self.relu = nn.ReLU(inplace=True)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=1)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=1)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=1)
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1)) # Adaptive pooling to handle the small input size
        self.fc = nn.Linear(512 * block.expansion, num_classes)
        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, nn.BatchNorm2d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

    def _make_layer(self, block, out_channels, blocks, stride=1):
        downsample = None
        if stride != 1 or self.in_channels != out_channels * block.expansion:
            downsample = nn.Sequential(
                nn.Conv2d(self.in_channels, out_channels * block.expansion, kernel_size=1, stride=stride, bias=False),
                nn.BatchNorm2d(out_channels * block.expansion),
            )
        layers = []
        layers.append(block(self.in_channels, out_channels, stride, downsample))
        self.in_channels = out_channels * block.expansion
        for i in range(1, blocks):
            layers.append(block(self.in_channels, out_channels))
        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.layer1(x)
        x = self.layer2(x)
        x = self.layer3(x)
        x = self.layer4(x)
        x = self.avgpool(x)
        x = x.view(x.size(0), -1)
        x = self.fc(x)
        x = torch.sigmoid(x) # Applying sigmoid to get probabilities
        return x

    def vector_to_image_batch(self, X):
        # 将每个128维向量转换为16x8的图像
        batch_size = X.shape[0]
        images = torch.zeros((batch_size, 1, 16, 8))
        for i in range(batch_size):
            images[i, 0, :, :] = X[i].view(16, 8)
        return images

    def predict(self, X):
        # 检查输入数据的形状，如果是128维向量，则需要转换
        if X.dim() == 2 and X.shape[1] == 128:
            X = self.vector_to_image_batch(X)

        # 如果使用GPU，将数据转移到GPU
        if torch.cuda.is_available():
            X = X.cuda()

        # 进行预测
        with torch.no_grad():
            probabilities = self.forward(X)

        # 根据设置的阈值（例如0.5）将概率转换为0或1的标签
        labels = (probabilities > 0.5).float() # 大于0.5的概率对应的标签为1(恶性); 小于0.5的概率对应的标签为0(良性)
        return probabilities, labels

def resnet18():
    # Instantiate the ResNet model for 16x8 grayscale images
    model = ResNet(BasicBlock, [2, 2, 2, 2], num_classes=1)
    return model


