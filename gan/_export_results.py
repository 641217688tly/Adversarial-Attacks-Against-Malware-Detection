import datetime
from pathlib import Path
from typing import Union # 导入Union，用于类型提示中表明某个变量可以是多种类型中的一种
import numpy as np
import torch
from sklearn.metrics import confusion_matrix, roc_auc_score # 导入sklearn库中的metrics模块，提供了一系列用于评估模型性能的方法

# 定义两个类型别名，用于简化类型提示
TensorOrFloat = Union[torch.Tensor, float]
TorchOrNumpy = Union[torch.Tensor, np.ndarray]

# noinspection PyProtectedMember,PyUnresolvedReferences
def _export_results(model: 'MalGAN', valid_loss: TensorOrFloat, test_loss: TensorOrFloat,
                    avg_num_bits_changed: TensorOrFloat, y_actual: np.ndarray,
                    y_mal_orig: TorchOrNumpy, y_prob: TorchOrNumpy, y_hat: np.ndarray) -> str:
    r"""
    导出MalGAN的结果。

    :param model: MalGAN模型
    :param valid_loss: 在恶意软件验证集上的平均损失
    :param test_loss: 在恶意软件测试集上的平均损失
    :param avg_num_bits_changed: 平均改变的位数
    :param y_actual: 实际标签
    :param y_mal_orig: 在原始（未修改）恶意软件上的预测值
    :param y_prob: 恶意软件的概率
    :param y_hat: 预测标签
    :return: 结果字符串
    """
    # 如果y_prob是torch.Tensor类型，将其转换为numpy数组
    if isinstance(y_prob, torch.Tensor):
        # y_prob = y_prob.numpy()
        y_prob = y_prob.cpu().numpy()
    # 如果y_mal_orig是torch.Tensor类型，将其转换为numpy数组
    if isinstance(y_mal_orig, torch.Tensor):
        y_mal_orig = y_mal_orig.numpy()

    # 构造结果文件的路径
    results_file = Path("results.csv")
    # 检查结果文件是否已存在
    exists = results_file.exists()
    # 以追加和读写模式打开文件
    with open(results_file, "a+") as f_out:
        # 定义CSV文件的表头
        header = ",".join(["time_completed,M,Z,batch_size,test_set_size,detector_type,activation",
                           "gen_hidden_dim,discim_hidden_dim",
                           "avg_validation_loss,avg_test_loss,avg_num_bits_changed",
                           "auc,orig_mal_detect_rate,mod_mal_detect_rate,ben_mal_detect_rate"])
        # 如果文件不存在，写入表头
        if not exists:
            f_out.write(header)

        # 构造结果数据
        results = ["\n%s" % datetime.datetime.now(),  # 当前时间
                   "%d,%d,%d" % (model.M, model.Z, model.__class__.MALWARE_BATCH_SIZE),  # 模型参数
                   "%d,%s,%s" % (len(y_actual), model._bb.type.name, model._g.__class__.__name__),  # 模型参数和数据信息
                   "\"%s\",\"%s\"" % (str(model.d_gen), str(model.d_discrim)),  # 生成器和判别器的隐藏层维度
                   "%.15f,%.15f,%.3f" % (valid_loss, test_loss, avg_num_bits_changed)]  # 损失和改变的位数的平均值

        # 计算AUC值
        auc = roc_auc_score(y_actual, y_prob)
        results.append("%.8f" % auc)

        # 计算在未修改恶意软件上的检测率
        results.append("%.8f" % y_mal_orig.mean())

        # 计算混淆矩阵，并从中提取True Positive Rate (TPR) 和 False Positive Rate (FPR)
        # print(f"y_actual.shape:{y_actual.shape}")
        # print(y_actual)
        # print(f"y_hat.shape:{y_hat.shape}")
        # print(y_hat)
        tn, fp, fn, tp = confusion_matrix(y_actual, y_hat).ravel()
        tpr, fpr = tp / (tp + fn), fp / (tn + fp)
        # 将TPR和FPR添加到结果中
        for rate in [tpr, fpr]:
            results.append("%.8f" % rate)
        # 将结果转换为字符串并写入文件
        results = ",".join(results)
        f_out.write(results)

        # 返回包含表头和结果数据的字符串
        return "".join([header, results])
