import datetime
from pathlib import Path
from typing import Union # 导入Union，用于类型提示中表明某个变量可以是多种类型中的一种
import numpy as np
import torch
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, roc_auc_score # 导入sklearn库中的metrics模块，提供了一系列用于评估模型性能的方法

# 定义两个类型别名，用于简化类型提示
TensorOrFloat = Union[torch.Tensor, float]
TorchOrNumpy = Union[torch.Tensor, np.ndarray]

def draw_confusion_matrix(confusion_mat, labels):
    plt.imshow(confusion_mat, interpolation='nearest', cmap=plt.cm.Blues)
    plt.title('Confusion Matrix')
    plt.colorbar()
    tick_marks = np.arange(len(labels))
    plt.xticks(tick_marks, labels, rotation=45)
    plt.yticks(tick_marks, labels)

    for i in range(len(labels)):
        for j in range(len(labels)):
            plt.text(j, i, format(confusion_mat[i, j], 'd'),
                     horizontalalignment="center",
                     color="white" if confusion_mat[i, j] > confusion_mat.max() / 2 else "black")

    plt.ylabel('True label')
    plt.xlabel('Predicted label')
    plt.tight_layout()
    plt.show()


def _export_results(model: 'MalGAN', valid_loss: TensorOrFloat, test_loss: TensorOrFloat,
                    avg_num_bits_changed: TensorOrFloat, y_actual: np.ndarray,
                    y_prob: TorchOrNumpy, y_hat: np.ndarray, orig_y_predicted, orig_y_actual) -> str:
    r"""
    导出MalGAN的结果。

    :param model: MalGAN模型
    :param valid_loss: 在恶意软件验证集上的平均损失
    :param test_loss: 在恶意软件测试集上的平均损失
    :param avg_num_bits_changed: 平均改变的位数
    :param y_actual: 实际标签
    :param y_mal_orig: 在原始（未修改）恶意软件上的预测值
    :param y_prob: 恶意软件的概率
    :param y_hat: 预测标签
    :return: 结果字符串
    """
    # 如果y_prob是torch.Tensor类型，将其转换为numpy数组
    if isinstance(y_prob, torch.Tensor):
        y_prob = y_prob.cpu().numpy()

    # 确保这些张量在CPU上
    orig_y_actual = orig_y_actual.cpu() if orig_y_actual.is_cuda else orig_y_actual
    orig_y_predicted = orig_y_predicted.cpu() if orig_y_predicted.is_cuda else orig_y_predicted

    # 构造结果文件的路径
    results_file = Path("results.csv")
    # 检查结果文件是否已存在
    exists = results_file.exists()
    # 以追加和读写模式打开文件
    with open(results_file, "a+") as f_out:
        # 定义CSV文件的表头
        header = ",".join(["time_completed,M,Z,batch_size,test_set_size,detector_type,activation",
                           "gen_hidden_dim,discim_hidden_dim",
                           "avg_validation_loss,avg_test_loss,avg_num_bits_changed",
                           "auc,orig_accuracy,orig_TPR,orig_FPR",
                           "modified_accuracy,modified_TPR,modified_FPR"])
        # 如果文件不存在，写入表头
        if not exists:
            f_out.write(header)

        # 构造结果数据
        results = ["\n%s" % datetime.datetime.now(),  # 当前时间
                   "%d,%d,%d" % (model.M, model.Z, model.__class__.MALWARE_BATCH_SIZE),  # 模型参数
                   "%d,%s,%s" % (len(y_actual), model._bb.type.name, model._g.__class__.__name__),  # 模型参数和数据信息
                   "\"%s\",\"%s\"" % (str(model.d_gen), str(model.d_discrim)),  # 生成器和判别器的隐藏层维度
                   "%.15f,%.15f,%.3f" % (valid_loss, test_loss, avg_num_bits_changed)]  # 损失和改变的位数的平均值

        # 计算AUC值
        auc = roc_auc_score(y_actual, y_prob)
        results.append("%.8f" % auc)

        # 计算混淆矩阵
        tn, fp, fn, tp = confusion_matrix(orig_y_actual, orig_y_predicted).ravel()
        # 计算准确率、真阳性率和假阳性率
        orig_accuracy = (tp + tn) / (tp + tn + fp + fn)
        orig_tpr = tp / (tp + fn) if (tp + fn) > 0 else 0  # 真阳性率(TPR)
        orig_fpr = fp / (fp + tn) if (fp + tn) > 0 else 0  # 假阳性率(FPR)
        # 在结果中添加未修改样本的准确率、真阳性率和假阳性率
        results.append("%.8f,%.8f,%.8f" % (orig_accuracy, orig_tpr, orig_fpr))

        # 计算混淆矩阵，并从中提取True Positive Rate (TPR) 和 False Positive Rate (FPR)
        tn, fp, fn, tp = confusion_matrix(y_actual, y_hat).ravel()
        modified_accuracy = (tp + tn) / (tp + tn + fp + fn)
        modified_tpr = tp / (tp + fn) if (tp + fn) > 0 else 0  # 真阳性率(TPR)
        modified_fpr = fp / (fp + tn) if (fp + tn) > 0 else 0  # 假阳性率(FPR)
        # 将TPR和FPR添加到结果中
        results.append("%.8f,%.8f,%.8f" % (modified_accuracy, modified_tpr, modified_fpr))

        # 将结果转换为字符串并写入文件
        results = ",".join(results)
        f_out.write(results)

        # 绘制混淆矩阵
        original_conf_mat = confusion_matrix(orig_y_actual, orig_y_predicted)
        draw_confusion_matrix(original_conf_mat, labels=['Benign', 'Malware'])

        modified_conf_mat = confusion_matrix(y_actual, y_hat)
        draw_confusion_matrix(modified_conf_mat, labels=['Benign', 'Malware'])

        # 返回包含表头和结果数据的字符串
        return "".join([header, results])
